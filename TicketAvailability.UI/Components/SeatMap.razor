@using TicketAvailability.UI.Services
@inject SeatService Seats
@implements IDisposable

<div class="seatmap">
    <table>
        @foreach (var row in Enumerable.Range(0, 3))
        {
            <tr>
            @foreach (var col in Enumerable.Range(1, 3))
            {
                var index = row * 3 + col;
                var seatId = $"seat{index}";
                var available = seatStatus.ContainsKey(seatId) && seatStatus[seatId];
                <td>
                    <button class="@(available ? "available" : "locked")" @onclick="() => Toggle(seatId)">
                        @(seatId)
                    </button>
                </td>
            }
            </tr>
        }
    </table>
</div>

@code {
    private Dictionary<string,bool> seatStatus = new();
    private System.Threading.Timer? _timer;

    protected override async Task OnInitializedAsync()
    {
        await Refresh();
        _timer = new System.Threading.Timer(async _ =>
        {
            await Refresh();
            await InvokeAsync(StateHasChanged);
        }, null, TimeSpan.FromSeconds(2), TimeSpan.FromSeconds(2));
    }

    private async Task Refresh()
    {
        foreach (var id in Seats.SeatIds)
        {
            seatStatus[id] = await Seats.GetStatusAsync(id);
        }
    }

    private async Task Toggle(string id)
    {
        await Seats.ToggleAsync(id);
        seatStatus[id] = await Seats.GetStatusAsync(id);
    }

    public void Dispose()
    {
        _timer?.Dispose();
    }
}
